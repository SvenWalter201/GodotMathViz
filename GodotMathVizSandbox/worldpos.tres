[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=3]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Input:3
	mat4 n_out3p0 = CAMERA_MATRIX;

// Input:2
	vec3 n_out2p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out3p0 * vec4(n_out2p0, 1.0)).xyz;

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -857, 73 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -500, 200 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -500, 120 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -100, 160 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 4, 0, 0, 0 )
